import streamlit as st
import random
import pandas as pd
import time
from datetime import datetime
from streamlit_drawable_canvas import st_canvas 

# --- IMPORTS DE APRENDIZAJE AUTOM√ÅTICO RESTAURADOS ---
import tensorflow as tf
from PIL import Image, ImageOps
import numpy as np
# Se omite matplotlib.pyplot ya que no es necesario para la funcionalidad principal.
# --- FIN IMPORTS RESTAURADOS ---

# --- 1. Mapeo Creativo de Mensajes Estelares ---
# Mensajes que se usar√°n en la predicci√≥n
COSMIC_MESSAGES = {
    "0": "¬°Cero es la √≥rbita perfecta! Un anillo de asteroides sin fallas.",
    "1": "¬°Uno es un cometa solitario! Un rastro de luz simple y fuerte.",
    "2": "¬°Dos son planetas gemelos! La dualidad est√° clasificada correctamente.",
    "3": "¬°Tres son estrellas en tri√°ngulo! La trinidad c√≥smica est√° clara.",
    "4": "¬°Cuatro son las lunas de J√∫piter! La formaci√≥n es precisa.",
    "5": "¬°Cinco son los dedos de tu mano! El escaneo manual fue un √©xito.",
    "6": "¬°Seis es el hex√°gono de Saturno! Una forma compleja bien resuelta.",
    "7": "¬°Siete son las Pl√©yades! Un c√∫mulo de estrellas brillante y n√≠tido.",
    "8": "¬°Ocho es el s√≠mbolo de infinito! Un bucle de energ√≠a clasificado.",
    "9": "¬°Nueve son las galaxias principales! El patr√≥n del universo est√° completo."
}

# --- 2. Inyecci√≥n de CSS para la Est√©tica "Cosmic Cute" ---
def inject_cosmic_cute_css():
    st.markdown(f"""
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Sniglet&family=Space+Mono:wght@400;700&display=swap');
            
            /* Colores Base: Pastel Space */
            :root {{
                --color-primary: #FFB3C1; /* Soft Pink Nebula */
                --color-secondary: #A7C7E7; /* Light Blue Sky */
                --color-background: #F5F7FA; /* Star White */
                --color-text: #483D8B; /* Dark Purple Comet */
                --color-accent: #FFD700; /* Gold Star */
            }}

            /* Fondo de la Aplicaci√≥n */
            .stApp {{
                background: linear-gradient(135deg, var(--color-background) 0%, var(--color-secondary) 100%);
                color: var(--color-text);
                font-family: 'Sniglet', cursive; /* Fuente Cute */
            }}

            /* T√≠tulos */
            h1, h2, h3, h4 {{
                font-family: 'Space Mono', monospace; /* Fuente Tech Space */
                color: var(--color-text);
                text-shadow: 2px 2px var(--color-primary);
                text-align: center;
                margin-top: 0.5em;
            }}
            
            /* Bot√≥n de Predicci√≥n (Estilo Asteroide) */
            .stButton > button {{
                background-color: var(--color-accent);
                color: var(--color-text);
                border: 3px solid var(--color-primary);
                border-radius: 20px;
                padding: 10px 20px;
                box-shadow: 4px 4px 0px var(--color-text);
                transition: all 0.2s;
                font-family: 'Space Mono', monospace;
            }}
            .stButton > button:hover {{
                background-color: var(--color-primary);
                box-shadow: 2px 2px 0px var(--color-accent);
                transform: translateY(2px);
            }}

            /* Dataframe y Cajas de Informaci√≥n */
            .stDataFrame, .stAlert, .stInfo, .stWarning, .stSuccess {{
                border-radius: 10px;
                border: 2px solid var(--color-text);
                background-color: #FFFFFF;
                box-shadow: 3px 3px 0px var(--color-primary);
                color: var(--color-text);
                padding: 10px;
            }}
            
            /* Barra lateral */
            .css-1d3s3aw, .st-emotion-cache-1d3s3aw {{ /* Target the sidebar */
                background-color: var(--color-secondary);
                border-right: 2px solid var(--color-primary);
            }}
            
            /* Estilo para el Canvas de Dibujo */
            .main .block-container .st-emotion-cache-1ft911z, 
            .main .block-container .st-emotion-cache-1cpxdwv {{
                display: flex;
                justify-content: center;
                align-items: center;
                flex-direction: column;
            }}

        </style>
    """, unsafe_allow_html=True)

# --- 3. Configuraci√≥n de p√°gina Streamlit y CSS ---
st.set_page_config(
    page_title='El Crayon C√≥smico',
    page_icon='‚≠ê',
    layout='wide'
)

inject_cosmic_cute_css()

# --- 4. Funciones de Predicci√≥n REAL (Restauradas) ---

@st.cache_resource
def load_model():
    """Carga el modelo de Keras una sola vez, si es posible."""
    try:
        # Nota: El archivo 'handwritten.h5' debe existir en la carpeta 'model/'
        model = tf.keras.models.load_model("model/handwritten.h5")
        return model
    except Exception as e:
        # Captura el error si TensorFlow o el archivo no est√°n disponibles.
        st.error(f"¬°Alerta Estelar! No se pudo cargar el modelo de IA. El archivo 'model/handwritten.h5' o las librer√≠as (TensorFlow/Keras) podr√≠an faltar. Detalles: {e}")
        return None

def predictDigit(image_data, model):
    """Procesa la imagen del Canvas y predice el d√≠gito usando el modelo."""
    
    # 1. Convertir datos del Canvas (RGBA array) a imagen PIL
    # El c√≥digo original usaba Image.fromarray(..., 'RGBA')
    input_image = Image.fromarray(image_data.astype('uint8'),'RGBA')
    
    # 2. Preprocesamiento (como en el c√≥digo original)
    image = ImageOps.grayscale(input_image)
    img = image.resize((28,28))
    img = np.array(img, dtype='float32')
    img = img/255
    
    # 3. Preparar para el modelo (reshape: (1, 28, 28, 1) para CNN)
    img = img.reshape((1, 28, 28, 1))
    
    # 4. Predicci√≥n
    pred = model.predict(img)
    probabilities_list = pred[0].tolist() # Lista de 10 probabilidades
    result = np.argmax(pred[0])
    
    # 5. Formatear las probabilidades como un diccionario para el DataFrame
    probabilities_dict = {i: prob for i, prob in enumerate(probabilities_list)}

    return str(result), probabilities_dict


# --- 5. L√≥gica de UI Principal ---
st.title("‚≠ê EL CRAYON C√ìSMICO: ORGANIZADOR ESTELAR DE N√öMEROS")

st.markdown(f"""
<div style='text-align: center; background-color: var(--color-primary); padding: 15px; border-radius: 10px; border: 2px solid var(--color-text); margin-bottom: 30px;'>
    <h3 style='font-family: "Sniglet", cursive; text-shadow: none; color: var(--color-text);'>
        ¬°Bienvenido, peque√±o explorador! üöÄ
    </h3>
    <p style='font-family: "Sniglet", cursive; color: var(--color-text); margin-bottom: 0;'>
        Usa el rat√≥n o tu dedo para **dibujar un d√≠gito (0-9)** en el Bloc de Polvo Estelar. 
        Luego, presiona 'Clasificar Constelaci√≥n' para que nuestro Ordenador Estelar lo analice.
    </p>
</div>
""", unsafe_allow_html=True)

# Contenedor para el "Canvas"
col_canvas, col_spacer = st.columns([1, 1])

with col_canvas:
    st.subheader("üåå Bloc de Polvo Estelar (Dibuja aqu√≠)")
    
    # Componente Canvas de Dibujo
    canvas_result = st_canvas(
        fill_color="rgba(255, 165, 0, 0.0)",  # Color de relleno de fondo, transparente
        stroke_width=20, # Ancho de l√≠nea grueso para mejor visibilidad del dibujo
        stroke_color="#FFD700", # Color del trazo: Dorado Estelar
        background_color="#483D8B", # Fondo del bloc: P√∫rpura Cometa
        height=250,
        width=250,
        drawing_mode="freedraw",
        key="canvas",
    )
    
# Bot√≥n de Predicci√≥n
if st.button('Clasificar Constelaci√≥n'):
    # Cargar el modelo
    model = load_model()
    
    if model is None:
        # El error ya se mostr√≥ dentro de load_model
        st.error("¬°Emergencia C√≥smica! La clasificaci√≥n de constelaciones no puede continuar sin el modelo de IA.")
    elif canvas_result.image_data is not None:
        
        # El canvas retorna un array NumPy RGBA
        input_numpy_array = canvas_result.image_data 
        
        # Verificar si se ha dibujado algo significativo
        non_transparent_pixels = (input_numpy_array[:, :, 3] > 0).sum()
        
        if non_transparent_pixels < 50:
            st.error('‚ö†Ô∏è ¬°Alerta Estelar! Por favor, dibuja un d√≠gito visible en el Bloc de Polvo Estelar antes de clasificar.')
        else:
            # Predicci√≥n REAL con la l√≥gica restaurada
            predicted_digit_str, probabilities_dict = predictDigit(input_numpy_array, model)
            
            # Obtener la probabilidad principal para el encabezado
            main_probability = probabilities_dict.get(int(predicted_digit_str), 0.0)
            
            # Mostrar animaci√≥n de clasificaci√≥n
            with st.spinner(f"Analizando la forma del trazo estelar..."):
                time.sleep(2) 
            
            # Mostrar resultados
            
            col_res1, col_res2 = st.columns(2)
            
            with col_res1:
                st.subheader("‚úÖ Clasificaci√≥n Exitosa")
                
                # Mensaje del Or√°culo Estelar
                message = COSMIC_MESSAGES.get(predicted_digit_str, "El espacio es inmenso. Intenta un d√≠gito del 0 al 9.")
                
                st.markdown(f"""
                    <div style='background-color: var(--color-secondary); padding: 15px; border-radius: 10px; border: 2px solid var(--color-text); color: var(--color-text); font-family: "Sniglet", cursive;'>
                        <h4 style='font-family: "Space Mono", monospace; text-shadow: none; color: var(--color-text); margin-top: 0;'>
                            [Organizador Estelar]: Digito {predicted_digit_str} detectado.
                        </h4>
                        <p>{message}</p>
                    </div>
                """, unsafe_allow_html=True)
                
                # Mostrar el resultado del header 
                st.header(f'El D√≠gito es : {predicted_digit_str} (Confianza: {main_probability * 100:.2f}%)')


            with col_res2:
                st.subheader("üìà Matriz de Confianza")
                
                # Crear DataFrame para mostrar la matriz de probabilidad
                prob_data = [{"D√≠gito": i, "Probabilidad (%)": f"{probabilities_dict[i] * 100:.2f}"} for i in range(10)]
                df_prob = pd.DataFrame(prob_data)
                
                # Ordenar por Probabilidad descendente
                df_prob['Probabilidad (%)'] = df_prob['Probabilidad (%)'].str.replace('%', '').astype(float)
                df_prob = df_prob.sort_values(by='Probabilidad (%)', ascending=False)
                df_prob['Probabilidad (%)'] = df_prob['Probabilidad (%)'].apply(lambda x: f"{x:.2f}%")

                st.dataframe(df_prob.set_index('D√≠gito'), use_container_width=True, height=350)
        
    else:
        st.warning('‚ö†Ô∏è Por favor, dibuja un √∫nico d√≠gito (0-9) en el bloc para simular la detecci√≥n.')


# --- Barra lateral (Sidebar) ---
st.sidebar.title("ü™ê Bit√°cora de Vuelo (Acerca de)")
st.sidebar.markdown("""
<div style='font-family: "Sniglet", cursive; color: var(--color-text);'>
    <p>Esta aplicaci√≥n utiliza un modelo de Red Neuronal Convolucional (CNN) entrenado con datos MNIST (d√≠gitos).</p>
    <p>La **Interacci√≥n Multimodal** se ilustra mediante la entrada de escritura (dibujar con el rat√≥n/dedo) y el posterior procesamiento por la m√°quina.</p>
    <br>
    <p>Hecho con amor c√≥smico. ¬°Clasifica una constelaci√≥n!</p>
</div>
""", unsafe_allow_html=True)


# Informaci√≥n adicional y pie de p√°gina
st.markdown("---")
st.caption("""
**Acerca de la aplicaci√≥n (El Crayon C√≥smico)**: 
Esta interfaz es un trabajo de Interfaces Multimodales. Utiliza Streamlit y el componente de dibujo para la entrada de datos, y **ahora emplea el modelo de Aprendizaje Autom√°tico original** para realizar la clasificaci√≥n real de d√≠gitos, ilustrando el concepto de Visi√≥n Artificial.
""")
